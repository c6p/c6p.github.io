'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/posts/csp/#what-is-csp','title':"What Is C S P? ",'section':"Blog/Demistifying Content Securiy Policy",'content':" An HTTP header for fine-grained control over where resources are loaded from. By employing content-security-policy, we can eliminate almost all XSS (Cross Site Scripting) attacks.\n"});index.add({'id':1,'href':'/posts/csp/#why-xss-is-a-problem','title':"Why X S S Is a Problem? ",'section':"Blog/Demistifying Content Securiy Policy",'content':" arbitrary\n"});index.add({'id':2,'href':'/posts/csp/#may-6-github-pages','title':"May 6 — Git Hub Pages ",'section':"Blog/Demistifying Content Securiy Policy",'content':" GitHub pages does not let us specify HTTP headers, and out of the box the grade is a D. One way is to include \u0026lt;meta http-equiv=\u0026quot;Content-Security-Policy\u0026quot; content=\u0026quot;...\u0026quot;\u0026gt; as first child of \u0026lt;head\u0026gt;. Yet, netlify lets us set our response headers beyond other goodies, so I skipped ahead.\n"});index.add({'id':3,'href':'/posts/csp/#may-8-netlify-a-false-hope','title':"May 8 — Netlify ( a False Hope) ",'section':"Blog/Demistifying Content Securiy Policy",'content':" Setting up a site on netlify from GitHub is trivial. Point to your repository, enter your build command and publish directory. Done.\nOur response headers are in _headers file at the root of publish directory. Mozilla suggest starting with default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self' for CSP.\n default-src - default policy for allowed fallback sources  img-src - for images font-src - for fonts script-src - for scripts, i.e. JavaScript style-src - for styles, i.e. CSS connect-src - e.g. XMLHttpRequest, WebSocket object-src - for plugins, e.g. Flash, Silverlight     'none' - nothing 'self' - same site    https: - only HTTPS 'strict-dynamic' - let trusted code blocks to load additional scripts    'unsafe-hashes' - only code in event handler attributes, e.g. onClick 'unsafe-inline' - all inline code blocks 'unsafe-eval' - eval   I began with something similar to what Mozilla suggests, extended to allow CDNs for third party scripts. All \u0026lt;script\u0026gt;s required to have a hash or a nonce. A nonce is a cryptographically secure random token per request for a script block. It is impossible for a static site to return them. So we should include sha256 hashes on integrity attributes (SRI — Sub-resource integrity) to ensure they are not tampered. Simple with Hugo templates.\n\u0026lt;!-- For inline script blocks --\u0026gt; {{ with (resources.Get \u0026#34;inline.js\u0026#34; | minify | fingerprint) }} \u0026lt;script integrity=\u0026#34;{{ .Data.Integrity }}\u0026#34;\u0026gt;{{ .Content | safeJS }}\u0026lt;/script\u0026gt; {{ end }} \u0026lt;!-- For external scripts --\u0026gt; {{ $script := resources.Get \u0026#34;external.js\u0026#34; | minify | fingerprint }} \u0026lt;script src=\u0026#34;{{ $script.RelPermalink }}\u0026#34; integrity=\u0026#34;{{ $script.Data.Integrity }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Result is an A+. Yet, there is a problem. Error log shows that MathJax contains inline scripts and evals. So we are not yet done.\nHugo can highlight code blocks (no highlight.js), can preprocess SCSS -via hugo-extended- (no node.js), can minify resources and generate hashes during build. But it can\u0026rsquo;t yet generate diagrams (mermaid.js) nor typeset math (KaTeX, MathJax). Also, a client side search requires JavaScript. Thus, we still need some third party libraries.\n"});index.add({'id':4,'href':'/posts/csp/#bonus-point','title':"Bonus Point ",'section':"Blog/Demistifying Content Securiy Policy",'content':" Though irrelevant to CSP, important for security, for your external links\u0026hellip; There are some discussions for rel attribute for \u0026lt;base\u0026gt; tag for page wide rules.\n\u0026lt;a target=\u0026#34;_blank\u0026#34; rel=\u0026#34;nofollow noopener noreferrer\u0026#34;\u0026gt; "});index.add({'id':5,'href':'/posts/csp/#may-9-two-steps-back','title':"May 9 — Two Steps Back ",'section':"Blog/Demistifying Content Securiy Policy",'content':" I had to add unsafe-inlines to restore full functionality, although errors about evals were false flags. B+.\n"});index.add({'id':6,'href':'/posts/csp/#may-9-victory','title':"May 9 Victory ",'section':"Blog/Demistifying Content Securiy Policy",'content':""});index.add({'id':1000,'href':'/posts/tools/#windows','title':"Windows ",'section':"Blog/Developer and Power User Tools List",'content':"  scoop — Package installer — WinGet is not ready for prime-time and Chocolatey while has a larger database, it is too slow and harder to automate. scoop install a package to install an application. updates and uninstalls are straightforward too. It has even a \u0026lsquo;Unix which\u0026rsquo; alternative to find out path of an executable scoop which.  scoop-completion — For CLI completion.    scoop bucket add extras scoop bucket add nirsoft scoop install scoop-completion which autohotkey pyenv sysinternals shellexview shellmenuview rapidee lockhunter spacesniffer everything winmerge dupeguru winaero-tweaker carnac Then to update all scoop update . I am generally keeping self updating software like Firefox out of scoop, everything else is managed by scoop.\nYou can install \u0026lsquo;Everything\u0026rsquo; from an elevated CLI, otherwise it may raise a UAC prompt at boot.  --  AutoHotKey — Automation scripting language — Easy to learn and lightweight. One example is better than a thousand words, so here is an ahk file to scan with MalwareBytes Free.  Run, \u0026#34;C:\\Program Files\\Malwarebytes\\Anti-Malware\\mbam.exe\u0026#34; WinWait, Malwarebytes Free ControlClick, x450 y580, Malwarebytes Free,,,, NA  pyenv — Python version manager — Using multiple versions of Python at the same time is incredibly difficult. This tool just makes it possible. To make one version globally active pyenv global and only for current directory pyenv local. AutoRuns — Startup manager — When msconfig is not enough, easier to use, more powerful. Originally part of the Sysinternals suite acquired by Microsoft. ShellExView and ShellMenuView — Context menu editor — ShellExView is for shell extensions (i.e. 7-Zip submenu) and ShellMenuView is for static items in right click menus. RapidEE — Environment editor — Even though Windows 10 eased the environmental variables' management, RapidEE still has a place with its automatic invalid path check. LockHunter — File unlocker — In case of those nasty situations where some file or disk is locked, so you can\u0026rsquo;t delete/move or safely unmount. Just use from right-click menu or drop on it. Process Hacker — System Monitor — Can replace Task Manager. More powerful. It can filter task list and doubles as a lock-hunter. SpaceSniffer or WizTree — Disk space analyzer — SpaceSniffer\u0026rsquo;s UI is cleaner, but WizTree is faster to analyze disk. I used to be a user of WinDirStat whose UI is identical to WizTree, however it is slower than both options. Everything — Instant Search — Alternative to Unix locate. Although this tool only locates files by name, it is instant and lightweight, while Windows Search is both resource intensive and slow. Whenever, I am on a Windows desktop without Everything I just feel lost. WinMerge — Directory/file diff-merge — I am using it for recursive comparison and merge of directories. Files are, most of the time in version control, otherwise launching a text editor is simpler. dupeGuru — Duplicate finder — Simple and quick. TODO: Make use of music and picture specific features advertised. Winaero Tweaker — System customizer — Widely known. Contains many tweaks for appearance and behavior of your Windows. Carnac — Keyboard presentation — It displays keys pressed on screen. Useful for presentations, tutorials etc.  "});index.add({'id':1001,'href':'/posts/tools/#wsl-windows-subsystem-for-linux','title':"W S L ( Windows Subsystem for Linux) ",'section':"Blog/Developer and Power User Tools List",'content':"  genie — Systemd in a bottle — Systemd has become a core part of some GNU/Linux distributions, and it does not work with WSL. But for WSL2 there is a workaround, just start with wsl genie -s to get a systemd enabled shell.  "});index.add({'id':1002,'href':'/posts/tools/#cross-platform','title':"Cross Platform ",'section':"Blog/Developer and Power User Tools List",'content':"  ripgrep — Regex pattern searcher — A cross-platform alternative to Unix tool grep, to recursively search files for regex patterns. It is faster than alternatives ag, ack and grep. scrcpy — PC Android display — It is pure magic. Connect, then display and control your android device from the comfort of your PC. scrcpy -S to turn off android display on launch. adb — Android controller — Backup your android, uninstall apps and many more. SMPlayer — Video player — Compared to VLC, mplayer was always the better player though not that popular, and mpv fork is even better. Without doubt the best GUI for mpv is SMPlayer. It has OpenSubtitles.org search feature, and mpv will just play anything thrown to it more performant then any other player.  scoop bucket add jfut https://github.com/jfut/scoop-jfut.gitscoop # for smplayer  scoop install ripgrep scrcpy adb smplayer "});index.add({'id':1003,'href':'/posts/tools/#gnu/linux','title':"G N U/ Linux ",'section':"Blog/Developer and Power User Tools List",'content':"  tin-summer — Build artifacts cleaner — Anyone who is programming will end up huge amount of space occupied with build artifacts such as node-modules. Cleanup all with just sn a. Furthermore, it is a du replacement.  "});index.add({'id':2000,'href':'/docs/courses/operating_systems/#history','title':"History ",'section':"Course Notes/Operating Systems",'content':" "});index.add({'id':2001,'href':'/docs/courses/operating_systems/#just-libraries','title':"Just Libraries ",'section':"Course Notes/Operating Systems",'content':" OS would provide API. Jobs set up and then run in a batch by the operator. Computers were not interactive.\n"});index.add({'id':2002,'href':'/docs/courses/operating_systems/#protection','title':"Protection ",'section':"Course Notes/Operating Systems",'content':" The idea of system call invented by Atlas computing system. Instead of providing OS routines as a library (procedure call), special instructions to transition into a more formal, controlled process.\n window.onload=function(){mermaid.initialize({\"flowchart\":{\"useMaxWidth\":true},\"theme\":\"dark\"});} graph LR U(User Mode) K(Kernel Mode) U--|trap|K K--|return-from-trap|U "});index.add({'id':2003,'href':'/docs/courses/operating_systems/#multiprogramming','title':"Multiprogramming ",'section':"Course Notes/Operating Systems",'content':" I/O devices were slow, having a program wait CPU was a waste of time. Memory protection and concurrency became critical in the presence of I/O and interrupts. Unix was introduced inspired by TENEX and Berkeley Time-Sharing System.\n"});index.add({'id':2004,'href':'/docs/courses/operating_systems/#modern-era','title':"Modern Era ",'section':"Course Notes/Operating Systems",'content':" DOS didn’t think memory protection was important; thus, a malicious application could scribble all over memory. Mac OS(v9 and earlier) took a cooperative approach to job scheduling; thus, a thread that accidentally got stuck in an infinite loop could take over the entire system, forcing a reboot.\n"});index.add({'id':2005,'href':'/docs/courses/operating_systems/#the-process','title':"The Process ",'section':"Course Notes/Operating Systems",'content':" Time sharing allows OS to share CPU resource, by context-switch (stop a program to run another). A scheduling policy let OS to decide which program to run.\nAddress space is the memory the process can address, registers are also part of process\u0026rsquo;s machine state. For example program counter (PC, or instruction pointer IP) tells which instruction to execute next, stack pointer and associated frame pointer are used to manage the stack for function parameters, local variables and return addresses.   In early OSes loading done eagerly, modern OSes perform it lazily by paging and swapping.\n"});index.add({'id':2006,'href':'/docs/courses/operating_systems/#process-states','title':"Process States ",'section':"Course Notes/Operating Systems",'content':"  graph LR R(Running) B(Blocked) E(Ready) R--|Descheduled|E E--|Scheduled|R R--|I/O initiate|B B--|I/O done|E Running: executing instructions\nReady: ready, but OS has chosen not to run\nBlocked: not ready. I/O request etc.\nThese decisions are made by OS scheduler.\n   Time Process0 Process1 Notes     1 Running Ready    2 Running Ready    3 Running Ready Process0 /subinit\u0026gt;ates I/O   4 Blocked Running Process0 is blocked,   5 Blocked Running so Process1 runs   6 Blocked Running    7 Ready Running I/O done   8 Ready Running Process1 now done   9 Running –    10 Running – Process0 now done    "});index.add({'id':2007,'href':'/docs/courses/operating_systems/#process-api','title':"Process a P I ",'section':"Course Notes/Operating Systems",'content':" Shell run code after the call to fork() (to create a new child process by copying parent) but before the call to exec() (to run the command); this code can alter the environment of the about-to-be-run program, and then waits for the command to complete by calling wait(). When the child completes, shell returns, ready for next command. This enables features like input/output redirection, pipes.\nEach process has a name, in most systems a number, process ID (PID). Control is available in the form of signals to stop, continue, terminate.\nThe control is encapsulated by the notion of user, whom can only control their own processes. A superuser can control all processes.\n"});index.add({'id':3000,'href':'/docs/learning/exercism/#exercism','title':"Exercism ",'section':"Learning/Exercism",'content':" My exercism profile: c6p\n"});index.add({'id':3001,'href':'/docs/learning/exercism/#acronym','title':"Acronym ",'section':"Learning/Exercism",'content':" python Convert a phrase to its acronym. - view\nimport re def abbreviate(words): \u0026#34;\u0026#34;\u0026#34;Abbreviates words First alphabetic character succeeding nonalphabetic characters is captured, then uppercased. \u0026#34;\u0026#34;\u0026#34; return re.sub(r\u0026#39;[^A-Za-z]*([A-Za-z])[A-Za-z\\\u0026#39;]*\u0026#39;, r\u0026#39;\\1\u0026#39;, words).upper()  "});index.add({'id':3002,'href':'/docs/learning/exercism/#all-your-base','title':"All Your Base ",'section':"Learning/Exercism",'content':" javascript Convert a number, represented as a sequence of digits in one base, to any other base. - view\nexport function convert(arr, from, to) { if (!Number.isInteger(from) || from \u0026lt; 2) throw Error(\u0026#39;Wrong input base\u0026#39;) if (!Number.isInteger(to) || to \u0026lt; 2) throw Error(\u0026#39;Wrong output base\u0026#39;) else if (arr.length === 0 || (arr[0] === 0 \u0026amp;\u0026amp; arr.length !== 1) || arr.some(x =\u0026gt; x \u0026lt; 0 || x \u0026gt;= from)) throw Error(\u0026#39;Input has wrong format\u0026#39;) let base10 = arr.reduce((acc, n) =\u0026gt; acc * from + n, 0) if (base10 === 0) return arr const exp = Math.floor(Math.log(base10) / Math.log(to)) return [...Array(exp + 1).keys()].reduceRight(({ arr, n }, e) =\u0026gt; { const pow = to ** e return { arr: [...arr, Math.floor(n / pow)], n: n % pow } }, { arr: [], n: base10 }).arr }  "});index.add({'id':3003,'href':'/docs/learning/exercism/#allergies','title':"Allergies ",'section':"Learning/Exercism",'content':" python Given a person\u0026rsquo;s allergy score, determine whether or not they\u0026rsquo;re allergic to a given item, and their full list of allergies. - view\nclass Allergies(object): allergens = [\u0026#39;eggs\u0026#39;, \u0026#39;peanuts\u0026#39;, \u0026#39;shellfish\u0026#39;, \u0026#39;strawberries\u0026#39;, \u0026#39;tomatoes\u0026#39;, \u0026#39;chocolate\u0026#39;, \u0026#39;pollen\u0026#39;, \u0026#39;cats\u0026#39;] def __init__(self, score): self.lst = [Allergies.allergens[i] for i in range(8) if (score \u0026gt;\u0026gt; i) \u0026amp; 1] def allergic_to(self, item): return item in self.lst  "});index.add({'id':3004,'href':'/docs/learning/exercism/#anagram','title':"Anagram ",'section':"Learning/Exercism",'content':" python Given a word and a list of possible anagrams, select the correct sublist. - view\nfrom collections import Counter def find_anagrams(word, candidates): word = word.lower() counter = Counter(word) def is_anagram(candidate): candidate = candidate.lower() if word == candidate: return False return counter == Counter(candidate) return [c for c in candidates if is_anagram(c)] rust An anagram is a rearrangement of letters to form a new word. - view\nuse std::collections::HashSet; extern crate itertools; use itertools::Itertools; fn chars_lowercase(word: \u0026amp;str) -\u0026gt; impl Iterator\u0026lt;Item = String\u0026gt; + Clone + \u0026#39;_ { word.chars().map(|c| c.to_lowercase().to_string()) } fn anagram_for(word: \u0026amp;str, possible: \u0026amp;str) -\u0026gt; bool { let (w, p) = (chars_lowercase(word), chars_lowercase(possible)); w.clone().ne(p.clone()) \u0026amp;\u0026amp; w.sorted().eq(p.sorted()) } pub fn anagrams_for\u0026lt;\u0026#39;a\u0026gt;(word: \u0026amp;str, possible_anagrams: \u0026amp;[\u0026amp;\u0026#39;a str]) -\u0026gt; HashSet\u0026lt;\u0026amp;\u0026#39;a str\u0026gt; { possible_anagrams.iter().filter(|p| anagram_for(word, p)).cloned().collect() }  "});index.add({'id':3005,'href':'/docs/learning/exercism/#armstrong-numbers','title':"Armstrong Numbers ",'section':"Learning/Exercism",'content':" javascript An Armstrong number is a number that is the sum of its own digits each raised to the power of the number of digits. - view\nexport function validate(input) { return [...input.toString()] .reduce((sum, digit, _, arr) =\u0026gt; sum + digit ** arr.length, 0) === input } python An Armstrong number is a number that is the sum of its own digits each raised to the power of the number of digits. - view\ndef is_armstrong(number): digits = str(number) l = len(digits) return number == sum((int(d)**l for d in digits)) rust An Armstrong number is a number that is the sum of its own digits each raised to the power of the number of digits. - view\npub fn is_armstrong_number(num: u32) -\u0026gt; bool { let digits = num.to_string(); let exp = digits.len() as u32; digits .chars() .map(|x| x.to_digit(10).unwrap().pow(exp)) .sum::\u0026lt;u32\u0026gt;() == num }  "});index.add({'id':3006,'href':'/docs/learning/exercism/#atbash-cipher','title':"Atbash Cipher ",'section':"Learning/Exercism",'content':" rust Create an implementation of the atbash cipher, an ancient encryption system created in the Middle East. - view\nconst A: u8 = b\u0026#39;a\u0026#39;; const Z: u8 = b\u0026#39;z\u0026#39;; const SEP_LEN: usize = 5; fn invert_and_lowercase_letters(string: \u0026amp;str) -\u0026gt; impl Iterator\u0026lt;Item = char\u0026gt; + \u0026#39;_ { string.chars().filter_map(|c| match c { \u0026#39;0\u0026#39;..=\u0026#39;9\u0026#39; =\u0026gt; Some(c), \u0026#39;a\u0026#39;..=\u0026#39;z\u0026#39; =\u0026gt; Some((Z - (c as u8) + A) as char), \u0026#39;A\u0026#39;..=\u0026#39;Z\u0026#39; =\u0026gt; Some((Z - (c.to_ascii_lowercase() as u8) + A) as char), _ =\u0026gt; None, }) } /// \u0026#34;Encipher\u0026#34; with the Atbash cipher. pub fn encode(plain: \u0026amp;str) -\u0026gt; String { invert_and_lowercase_letters(plain) .scan(0, |sep_len, c| match *sep_len { SEP_LEN =\u0026gt; { *sep_len = 1; Some(vec![\u0026#39; \u0026#39;, c]) } _ =\u0026gt; { *sep_len += 1; Some(vec![c]) } }) .flatten() .collect() } /// \u0026#34;Decipher\u0026#34; with the Atbash cipher. pub fn decode(cipher: \u0026amp;str) -\u0026gt; String { invert_and_lowercase_letters(cipher).collect() }  "});index.add({'id':3007,'href':'/docs/learning/exercism/#bank-account','title':"Bank Account ",'section':"Learning/Exercism",'content':" python Simulate a bank account supporting opening/closing, withdrawals, and deposits - view\nfrom threading import Lock def with_lock(func): LOCK = \u0026#39;_lock\u0026#39; def wrapped(self, *args): if not hasattr(self, LOCK): setattr(self, LOCK, Lock()) with getattr(self, LOCK): return func(self, *args) return wrapped def is_open(_func=None, opened=True): def check_open(func): def wrapped(self, *args): if (self.balance is None) ^ (not opened): raise ValueError( f\u0026#34;Account is not {\u0026#39;opened\u0026#39; if opened else \u0026#39;closed\u0026#39;}!\u0026#34;) return func(self, *args) return wrapped if _func is None: return check_open else: return check_open(_func) class BankAccount(object): def __init__(self): self.balance = None @is_open def get_balance(self): return self.balance @is_open(opened=False) @with_lock def open(self): self.balance = 0 @is_open @with_lock def deposit(self, amount): if amount \u0026lt; 0: raise ValueError(\u0026#34;Cannot deposit negative!\u0026#34;) self.balance += amount @is_open @with_lock def withdraw(self, amount): if amount \u0026lt; 0 or amount \u0026gt; self.balance: raise ValueError(\u0026#34;Cannot withdraw negative or more than balance!\u0026#34;) self.balance -= amount @is_open @with_lock def close(self): self.balance = None  "});index.add({'id':3008,'href':'/docs/learning/exercism/#beer-song','title':"Beer Song ",'section':"Learning/Exercism",'content':" rust Recite the lyrics to that beloved classic, that field-trip favorite: 99 Bottles of Beer on the Wall. - view\npub fn verse(n: i32) -\u0026gt; String { match n { 0 =\u0026gt; \u0026#34;No more bottles of beer on the wall, no more bottles of beer. Go to the store and buy some more, 99 bottles of beer on the wall. \u0026#34; .to_owned(), 1 =\u0026gt; \u0026#34;1 bottle of beer on the wall, 1 bottle of beer. Take it down and pass it around, no more bottles of beer on the wall. \u0026#34; .to_owned(), 2 =\u0026gt; \u0026#34;2 bottles of beer on the wall, 2 bottles of beer. Take one down and pass it around, 1 bottle of beer on the wall. \u0026#34; .to_owned(), n =\u0026gt; format!( \u0026#34;{} bottles of beer on the wall, {} bottles of beer. Take one down and pass it around, {} bottles of beer on the wall. \u0026#34;, n, n, n - 1 ), } } pub fn sing(start: i32, end: i32) -\u0026gt; String { let mut verses = String::new(); for i in (end..=start).rev() { verses += \u0026amp;verse(i); if i != end { verses += \u0026#34;\\n\u0026#34;; } } verses }  "});index.add({'id':3009,'href':'/docs/learning/exercism/#bob','title':"Bob ",'section':"Learning/Exercism",'content':" javascript Bob is a lackadaisical teenager. In conversation, his responses are very limited. - view\nexport const hey = (message) =\u0026gt; { message = message.trim() const isQuestion = message[message.length - 1] === \u0026#39;?\u0026#39; const isYelling = message.match(/[A-Z]/) \u0026amp;\u0026amp; message === message.toUpperCase() if (message === \u0026#39;\u0026#39;) return \u0026#39;Fine. Be that way!\u0026#39; else { if (isYelling) return isQuestion ? \u0026#34;Calm down, I know what I\u0026#39;m doing!\u0026#34; : \u0026#39;Whoa, chill out!\u0026#39; else if (isQuestion) return \u0026#39;Sure.\u0026#39; } return \u0026#39;Whatever.\u0026#39; }; python Bob is a lackadaisical teenager. In conversation, his responses are very limited. - view\ndef response(hey_bob): hey_bob = hey_bob.strip() if not hey_bob: return \u0026#34;Fine. Be that way!\u0026#34; is_yell = hey_bob.isupper() if hey_bob.endswith(\u0026#39;?\u0026#39;): # is_question if is_yell: return \u0026#34;Calm down, I know what I\u0026#39;m doing!\u0026#34; return \u0026#34;Sure.\u0026#34; elif is_yell: return \u0026#34;Whoa, chill out!\u0026#34; return \u0026#39;Whatever.\u0026#39; rust Bob is a lackadaisical teenager. In conversation, his responses are very limited. - view\nextern crate regex; use regex::Regex; pub fn reply(message: \u0026amp;str) -\u0026gt; \u0026amp;str { let special_chars = Regex::new(r\u0026#34;[0-9%@#$(,*^! \\t]*\u0026#34;).unwrap(); let ask_question = Regex::new(r\u0026#34;^.*\\?\\s*$\u0026#34;).unwrap(); let yell = Regex::new(r\u0026#34;^[A-Z]+\\s*$\u0026#34;).unwrap(); let yell_question = Regex::new(r\u0026#34;^[A-Z]+\\?\\s*$\u0026#34;).unwrap(); let address = Regex::new(r\u0026#34;^\\s*$\u0026#34;).unwrap(); if address.is_match(message) { \u0026#34;Fine. Be that way!\u0026#34; } else { match \u0026amp;special_chars.replace_all(message, \u0026#34;\u0026#34;) { m if yell_question.is_match(m) =\u0026gt; \u0026#34;Calm down, I know what I\u0026#39;m doing!\u0026#34;, m if ask_question.is_match(m) =\u0026gt; \u0026#34;Sure.\u0026#34;, m if yell.is_match(m) =\u0026gt; \u0026#34;Whoa, chill out!\u0026#34;, _ =\u0026gt; \u0026#34;Whatever.\u0026#34;, } } }  "});index.add({'id':3010,'href':'/docs/learning/exercism/#clock','title':"Clock ",'section':"Learning/Exercism",'content':" rust Implement a clock that handles times without dates. - view\nuse modulo::Mod; use std::fmt; use num_integer::Integer; const MINS_PER_HOUR: i32 = 60; const MINS_PER_DAY: i32 = 24 * MINS_PER_HOUR; #[derive(PartialEq, Debug)] pub struct Clock { hours: i32, minutes: i32, } impl Clock { pub fn new(hours: i32, minutes: i32) -\u0026gt; Self { Clock { hours, minutes }.add_minutes(0) } pub fn add_minutes(\u0026amp;self, minutes: i32) -\u0026gt; Self { let total_minutes = (self.hours * MINS_PER_HOUR + self.minutes + minutes).modulo(MINS_PER_DAY); let (hours, minutes) = total_minutes.div_rem(\u0026amp;MINS_PER_HOUR); Clock { hours, minutes } } } impl fmt::Display for Clock { fn fmt(\u0026amp;self, f: \u0026amp;mut fmt::Formatter) -\u0026gt; fmt::Result { write!(f, \u0026#34;{:02}:{:02}\u0026#34;, self.hours, self.minutes) } }  "});index.add({'id':3011,'href':'/docs/learning/exercism/#collatz-conjecture','title':"Collatz Conjecture ",'section':"Learning/Exercism",'content':" rust The Collatz Conjecture or 3x+1 problem can be summarized as follows: - view\npub fn collatz(n: u64) -\u0026gt; Option\u0026lt;u64\u0026gt; { match n { 0 =\u0026gt; None, // 1 is not reachable  _ =\u0026gt; (0..) .try_fold(n, |i, step| match i { 1 =\u0026gt; Err(step), // reached 1 at step  _ =\u0026gt; Ok(match i % 2 { 0 =\u0026gt; i / 2, _ =\u0026gt; 3 * i + 1, }), }) .err(), } }  "});index.add({'id':3012,'href':'/docs/learning/exercism/#darts','title':"Darts ",'section':"Learning/Exercism",'content':" javascript Write a function that returns the earned points in a single toss of a Darts game. - view\nconst targets = [1, 5**2, 10**2], points = [10, 5, 1] export function solve(x, y) { const r2 = x ** 2 + y ** 2 return points[targets.findIndex(t =\u0026gt; t \u0026gt;= r2)] || 0 }  "});index.add({'id':3013,'href':'/docs/learning/exercism/#difference-of-squares','title':"Difference of Squares ",'section':"Learning/Exercism",'content':" python Find the difference between the square of the sum and the sum of the squares of the first N natural numbers. - view\ndef square_of_sum(number): return sum(range(number+1)) ** 2 def sum_of_squares(number): return sum(i**2 for i in range(number+1)) def difference_of_squares(number): return square_of_sum(number) - sum_of_squares(number) rust Find the difference between the square of the sum and the sum of the squares of the first N natural numbers. - view\npub fn square_of_sum(n: u32) -\u0026gt; u32 { (1..=n).fold(0, |acc, x| acc + x).pow(2) } pub fn sum_of_squares(n: u32) -\u0026gt; u32 { (1..=n).fold(0, |acc, x| acc + x.pow(2)) } pub fn difference(n: u32) -\u0026gt; u32 { square_of_sum(n) - sum_of_squares(n) }  "});index.add({'id':3014,'href':'/docs/learning/exercism/#diffie-hellman','title':"Diffie Hellman ",'section':"Learning/Exercism",'content':" rust Diffie-Hellman key exchange. - view\nextern crate num; extern crate rand; use num::bigint::BigUint; use num::traits::cast::ToPrimitive; use rand::Rng; pub fn private_key(p: u64) -\u0026gt; u64 { rand::thread_rng().gen_range(2, p) } pub fn public_key(p: u64, g: u64, a: u64) -\u0026gt; u64 { BigUint::from(g) .modpow(\u0026amp;BigUint::from(a), \u0026amp;BigUint::from(p)) .to_u64() .unwrap() } pub fn secret(p: u64, b_pub: u64, a: u64) -\u0026gt; u64 { public_key(p, b_pub, a) }  "});index.add({'id':3015,'href':'/docs/learning/exercism/#dnd-character','title':"Dnd Character ",'section':"Learning/Exercism",'content':" python For a game of [Dungeons \u0026amp; Dragons][DND], each player starts by generating a - view\nfrom random import randint ABILITIES = [\u0026#39;strength\u0026#39;, \u0026#39;dexterity\u0026#39;, \u0026#39;constitution\u0026#39;, \u0026#39;intelligence\u0026#39;, \u0026#39;wisdom\u0026#39;, \u0026#39;charisma\u0026#39;] def modifier(constitution): return (constitution - 10) // 2 class Character: def __init__(self): for ability in ABILITIES: setattr(self, ability, self.ability()) self.hitpoints = 10 + modifier(self.constitution) def ability(self): return sum(sorted([randint(1, 6) for _ in range(4)])[1:])  "});index.add({'id':3016,'href':'/docs/learning/exercism/#error-handling','title':"Error Handling ",'section':"Learning/Exercism",'content':" python Implement various kinds of error handling and resource management. - view\ndef handle_error_by_throwing_exception(): raise Exception(\u0026#39;Error message\u0026#39;) def handle_error_by_returning_none(variable): try: return int(variable) except ValueError: return None def handle_error_by_returning_tuple(string): result = handle_error_by_returning_none(string) return (result is not None, result) def filelike_objects_are_closed_on_exception(file_object): with file_object as f: f.do_something()  "});index.add({'id':3017,'href':'/docs/learning/exercism/#gigasecond','title':"Gigasecond ",'section':"Learning/Exercism",'content':" javascript Given a moment, determine the moment that would be after a gigasecond - view\nconst GIGASECOND = 1e12 export const gigasecond = (date) =\u0026gt; { return new Date(date.getTime() + GIGASECOND) }; python Calculate the moment when someone has lived for 10^9 seconds. - view\nfrom datetime import timedelta GIGASECOND = timedelta(seconds=10**9) def add_gigasecond(moment): return moment + GIGASECOND rust Calculate the moment when someone has lived for 10^9 seconds. - view\nextern crate chrono; use chrono::{DateTime, TimeZone, Utc}; // Returns a Utc DateTime one billion seconds after start. pub fn after(start: DateTime\u0026lt;Utc\u0026gt;) -\u0026gt; DateTime\u0026lt;Utc\u0026gt; { return Utc.timestamp(start.timestamp() + 1_000_000_000, 0); }  "});index.add({'id':3018,'href':'/docs/learning/exercism/#grains','title':"Grains ",'section':"Learning/Exercism",'content':" python Calculate the number of grains of wheat on a chessboard given that the number - view\ndef on_square(n): if n \u0026lt; 1 or n \u0026gt; 64: raise ValueError(\u0026#39;Not an integer in [1-64]\u0026#39;) return 2 ** (n-1) def total_after(n): if n \u0026lt; 1 or n \u0026gt; 64: raise ValueError(\u0026#39;Not an integer in [1-64]\u0026#39;) return 2 ** n - 1 rust Calculate the number of grains of wheat on a chessboard given that the number - view\npub fn square(s: u32) -\u0026gt; u64 { match s { 1...64 =\u0026gt; 2u64.pow(s - 1), _ =\u0026gt; panic!(\u0026#34;Square must be between 1 and 64\u0026#34;), } } pub fn total() -\u0026gt; u64 { (1..=64).map(|s| square(s)).sum() }  "});index.add({'id':3019,'href':'/docs/learning/exercism/#hamming','title':"Hamming ",'section':"Learning/Exercism",'content':" python Calculate the Hamming difference between two DNA strands. - view\ndef distance(strand_a, strand_b): if len(strand_a) != len(strand_b): raise ValueError(\u0026#39;not of equal length\u0026#39;) return len([1 for a, b in zip(strand_a, strand_b) if a != b])  "});index.add({'id':3020,'href':'/docs/learning/exercism/#hello-world','title':"Hello World ",'section':"Learning/Exercism",'content':" javascript The classical introductory exercise. Just say \u0026ldquo;Hello, World!\u0026rdquo;. - view\nexport const hello = () =\u0026gt; { return \u0026#34;Hello, World!\u0026#34; }; python The classical introductory exercise. Just say \u0026ldquo;Hello, World!\u0026rdquo;. - view\ndef hello(): return \u0026#39;Hello, World!\u0026#39; rust The classical introductory exercise. Just say \u0026ldquo;Hello, World!\u0026rdquo;. - view\npub fn hello() -\u0026gt; \u0026amp;\u0026#39;static str { \u0026#34;Hello, World!\u0026#34; }  "});index.add({'id':3021,'href':'/docs/learning/exercism/#high-scores','title':"High Scores ",'section':"Learning/Exercism",'content':" python Manage a game player\u0026rsquo;s High Score list. - view\nclass HighScores(object): def __init__(self, scores): self.scores = scores def latest(self): return self.scores[-1] def personal_best(self): return max(self.scores) def personal_top(self): return sorted(self.scores, reverse=True)[:3] def report(self): latest, best = self.latest(), self.personal_best() short_of = f\u0026#34; {best - latest} short of \u0026#34; if best \u0026gt; latest else \u0026#34; \u0026#34; return f\u0026#34;Your latest score was {latest}. That\u0026#39;s{short_of}your personal best!\u0026#34;  "});index.add({'id':3022,'href':'/docs/learning/exercism/#isbn-verifier','title':"Isbn Verifier ",'section':"Learning/Exercism",'content':" python The ISBN-10 verification process is used to validate book identification - view\nimport re from operator import mul isbn_pattern = re.compile( r\u0026#39;^(\\d)-?(\\d)(\\d)(\\d)-?(\\d)(\\d)(\\d)(\\d)(\\d)-?([\\dX])$\u0026#39;) def is_valid(isbn): return sum(map(mul, (int(i) for i in isbn), range(10, 0, -1))) % 11 == 0 def verify(isbn): m = isbn_pattern.match(isbn) if m: x = [i for i in m.group(*range(1, 11))] if x[-1] == \u0026#39;X\u0026#39;: x[-1] = 10 return is_valid(x) return False  "});index.add({'id':3023,'href':'/docs/learning/exercism/#isogram','title':"Isogram ",'section':"Learning/Exercism",'content':" python Determine if a word or phrase is an isogram. - view\ndef is_isogram(string): letters = set() is_alpha = str.isalpha add = letters.add for c in string.lower(): if not is_alpha(c): continue if c in letters: return False add(c) return True rust Determine if a word or phrase is an isogram. - view\nuse itertools::sorted; pub fn check(candidate: \u0026amp;str) -\u0026gt; bool { sorted(candidate.to_ascii_lowercase().as_bytes()) .filter(|x| match **x as char { \u0026#39; \u0026#39; | \u0026#39;-\u0026#39; =\u0026gt; false, _ =\u0026gt; true, }) .try_fold( 0 as u8, |prev, \u0026amp;curr| { if prev == curr { Err(curr) } else { Ok(curr) } }, ) .is_ok() }  "});index.add({'id':3024,'href':'/docs/learning/exercism/#kindergarten-garden','title':"Kindergarten Garden ",'section':"Learning/Exercism",'content':" python Given a diagram, determine which plants each child in the kindergarten class is - view\nfrom numpy import array STUDENTS = [\u0026#34;Alice\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Charlie\u0026#34;, \u0026#34;David\u0026#34;, \u0026#34;Eve\u0026#34;, \u0026#34;Fred\u0026#34;, \u0026#34;Ginny\u0026#34;, \u0026#34;Harriet\u0026#34;, \u0026#34;Ileana\u0026#34;, \u0026#34;Joseph\u0026#34;, \u0026#34;Kincaid\u0026#34;, \u0026#34;Larry\u0026#34;] PLANTS = {\u0026#34;G\u0026#34;: \u0026#34;Grass\u0026#34;, \u0026#34;C\u0026#34;: \u0026#34;Clover\u0026#34;, \u0026#34;R\u0026#34;: \u0026#34;Radishes\u0026#34;, \u0026#34;V\u0026#34;: \u0026#34;Violets\u0026#34;} class Garden: def __init__(self, diagram, students=STUDENTS): self.students = sorted(students) self.diagram = array([list(row) for row in diagram.split(\u0026#39;\\n\u0026#39;)]) def plants(self, student): i = self.students.index(student) * 2 return [PLANTS[p] for p in self.diagram[:, i:i + 2].flatten()]  "});index.add({'id':3025,'href':'/docs/learning/exercism/#largest-series-product','title':"Largest Series Product ",'section':"Learning/Exercism",'content':" python Given a string of digits, calculate the largest product for a contiguous - view\nfrom functools import reduce from operator import mul def product(series): return reduce(lambda acc, i: acc*int(i), series, 1) def largest_product(series, size): if size \u0026lt; 0: raise ValueError(\u0026#34;Span should be positive!\u0026#34;) length = len(series) return max(product(series[i:i+size]) for i in range(length-size+1))  "});index.add({'id':3026,'href':'/docs/learning/exercism/#leap','title':"Leap ",'section':"Learning/Exercism",'content':" javascript Given a year, report if it is a leap year. - view\nexport function isLeap(year) { return year % 4 === 0 \u0026amp;\u0026amp; (year % 100 !== 0 || year % 400 === 0) } python Given a year, report if it is a leap year. - view\ndef is_leap_year(year): return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0) rust Given a year, report if it is a leap year. - view\npub fn is_leap_year(year: i32) -\u0026gt; bool { return year % 400 == 0 || (year % 4 == 0 \u0026amp;\u0026amp; year % 100 != 0); }  "});index.add({'id':3027,'href':'/docs/learning/exercism/#linked-list','title':"Linked List ",'section':"Learning/Exercism",'content':" javascript Implement a doubly linked list. - view\nclass Node { constructor({ val = null, prev = null, next = null }) { Object.assign(this, { val, prev, next }) } } export class LinkedList { constructor() { this.first = null this.last = this.first } push(val, last = \u0026#39;last\u0026#39;, prev = \u0026#39;prev\u0026#39;, next = \u0026#39;next\u0026#39;) { if (this[last] === null) this.first = this.last = new Node({ val }) else { let node = { val, [prev]: this[last] } this[last] = new Node(node) node[prev][next] = this[last] } } unshift(val) { this.push(val, \u0026#39;first\u0026#39;, \u0026#39;next\u0026#39;, \u0026#39;prev\u0026#39;) } pop(first = \u0026#39;first\u0026#39;, last = \u0026#39;last\u0026#39;, prev = \u0026#39;prev\u0026#39;, next = \u0026#39;next\u0026#39;) { const val = this[last].val this[last] = this[last][prev] if (this[last] === null) this[first] = this[last] else this[last][next] = null return val } shift() { return this.pop(\u0026#39;last\u0026#39;, \u0026#39;first\u0026#39;, \u0026#39;next\u0026#39;, \u0026#39;prev\u0026#39;) } delete(val) { let item = this.first while (item) { if (item.val === val) { if (item.next) item.next.prev = item.prev else this.last = item.prev if (item.prev) item.prev.next = item.next else this.first = item.next return } item = item.next } } count() { let [c, item] = [0, this.first] while (item) { c++ item = item.next } return c } }  "});index.add({'id':3028,'href':'/docs/learning/exercism/#matching-brackets','title':"Matching Brackets ",'section':"Learning/Exercism",'content':" rust Given a string containing brackets [], braces {}, parentheses (), - view\nfn close_bracket(c: char) -\u0026gt; char { match c { \u0026#39;{\u0026#39; =\u0026gt; \u0026#39;}\u0026#39;, \u0026#39;[\u0026#39; =\u0026gt; \u0026#39;]\u0026#39;, \u0026#39;(\u0026#39; =\u0026gt; \u0026#39;)\u0026#39;, _ =\u0026gt; panic!(\u0026#34;No matching close bracket!\u0026#34;), } } pub fn brackets_are_balanced(string: \u0026amp;str) -\u0026gt; bool { let mut unbalanced = Vec::\u0026lt;char\u0026gt;::new(); for c in string.chars() { match c { \u0026#39;{\u0026#39; | \u0026#39;[\u0026#39; | \u0026#39;(\u0026#39; =\u0026gt; unbalanced.push(close_bracket(c)), \u0026#39;}\u0026#39; | \u0026#39;]\u0026#39; | \u0026#39;)\u0026#39; =\u0026gt; { if unbalanced.pop() != Some(c) { return false; } } _ =\u0026gt; (), } } unbalanced.is_empty() }  "});index.add({'id':3029,'href':'/docs/learning/exercism/#matrix','title':"Matrix ",'section':"Learning/Exercism",'content':" javascript Given a string representing a matrix of numbers, return the rows and columns of - view\nexport class Matrix { constructor(matrix) { this.m = matrix.split(\u0026#39;\\n\u0026#39;).map(row =\u0026gt; row.split(\u0026#39; \u0026#39;).map(col =\u0026gt; Number(col))) } get rows() { return this.m } get columns() { return this.t = this.t || this.m[0].map((_, i) =\u0026gt; this.m.map(row =\u0026gt; row[i])) } } python Given a string representing a matrix of numbers, return the rows and columns of - view\nclass Matrix(): def __init__(self, matrix_string): self.rows = [[int(num) for num in line.split(\u0026#39; \u0026#39;)] for line in matrix_string.split(\u0026#39;\\n\u0026#39;)] def row(self, index): return self.rows[index-1] def column(self, index): return [row[index-1] for row in self.rows]  "});index.add({'id':3030,'href':'/docs/learning/exercism/#meetup','title':"Meetup ",'section':"Learning/Exercism",'content':" python Calculate the date of meetups. - view\nfrom calendar import monthrange, day_name from datetime import date class MeetupDayException(Exception): pass def meetup(year, month, week, day_of_week): weekday = dict(zip(day_name, range(7)))[day_of_week] firstday, max_days = monthrange(year, month) days = range((weekday - firstday) % 7 + 1, max_days + 1, 7) if week == \u0026#34;teenth\u0026#34;: day = next(i for i in days if i \u0026gt;= 13 and i \u0026lt;= 19) elif week == \u0026#39;last\u0026#39;: day = days[-1] else: # week in [\u0026#34;1st\u0026#34;, \u0026#34;2nd\u0026#34;, \u0026#34;3rd\u0026#34;, \u0026#34;4th\u0026#34;, \u0026#34;5th\u0026#34;]: try: day = days[int(week[0]) - 1] except: raise MeetupDayException(\u0026#34;No {0} {1}!\u0026#34;.format(week, day_of_week)) return date(year, month, day)  "});index.add({'id':3031,'href':'/docs/learning/exercism/#nth-prime','title':"Nth Prime ",'section':"Learning/Exercism",'content':" rust Given a number n, determine what the nth prime is. - view\npub fn nth(n: usize) -\u0026gt; u32 { fn is_prime(x: u32, factors: \u0026amp;Vec\u0026lt;u32\u0026gt;) -\u0026gt; bool { return !factors.iter().any(|\u0026amp;i| x % i == 0); } const FIRST_PRIME: u32 = 2; let mut primes = vec![FIRST_PRIME]; let mut num = FIRST_PRIME; while primes.len() \u0026lt;= n { num += 1; if is_prime(num, \u0026amp;primes) { primes.push(num); } } primes[n] }  "});index.add({'id':3032,'href':'/docs/learning/exercism/#pangram','title':"Pangram ",'section':"Learning/Exercism",'content':" javascript Determine if a sentence is a pangram. A pangram (Greek: παν γράμμα, pan gramma, - view\nconst ALPHABET = \u0026#39;abcdefghijklmnopqrstuvwxyz\u0026#39;.split(\u0026#39;\u0026#39;) export const isPangram = (sentence) =\u0026gt; { let s = sentence.toLowerCase() return ALPHABET.every(c =\u0026gt; s.includes(c)) } python Determine if a sentence is a pangram. A pangram (Greek: παν γράμμα, pan gramma, - view\ndef is_pangram(sentence): diff = ord(\u0026#39;z\u0026#39;) - ord(\u0026#39;a\u0026#39;) try: pangram = sorted(set(sentence.lower())) return diff == pangram.index(\u0026#39;z\u0026#39;) - pangram.index(\u0026#39;a\u0026#39;) except: return False  "});index.add({'id':3033,'href':'/docs/learning/exercism/#pascals-triangle','title':"Pascals Triangle ",'section':"Learning/Exercism",'content':" javascript Compute Pascal\u0026rsquo;s triangle up to a given number of rows. - view\nexport class Triangle { constructor(n) { if (n \u0026lt; 1) throw new Error(\u0026#34;Minimum rows for Pascals Triangle is 1\u0026#34;) this.tri = [...Array(n)].map(_ =\u0026gt; [1]) // init n rows  for (let i = 1; i \u0026lt; this.tri.length; i++) { this.tri[i] = [...Array(i + 1)].map((_, j) =\u0026gt; j === 0 || j === i ? 1 // first and last columns are 1  : this.tri[i - 1][j - 1] + this.tri[i - 1][j]) } } get lastRow() { return this.tri[this.tri.length - 1] } get rows() { return this.tri } }  "});index.add({'id':3034,'href':'/docs/learning/exercism/#perfect-numbers','title':"Perfect Numbers ",'section':"Learning/Exercism",'content':" python Determine if a number is perfect, abundant, or deficient based on - view\ndef factors(number): if number == 1: return elif number \u0026lt; 1: raise ValueError(\u0026#34;Not a positive integer!\u0026#34;) yield 1 for div in range(2, 1+int(number**0.5)): quo, rem = divmod(number, div) if not rem: yield div if quo is not div: yield quo def classify(number): diff = sum(factors(number)) - number return \u0026#34;perfect\u0026#34; if diff == 0 else \u0026#34;abundant\u0026#34; if diff \u0026gt; 0 else \u0026#34;deficient\u0026#34;  "});index.add({'id':3035,'href':'/docs/learning/exercism/#phone-number','title':"Phone Number ",'section':"Learning/Exercism",'content':" python Clean up user-entered phone numbers so that they can be sent SMS messages. - view\nimport re class Phone(object): _pattern = re.compile(r\u0026#39;\u0026#39;\u0026#39; \\+?1? # country code \\s*? # optional spaces \\(?([2-9]\\d{2})\\)? # area code \\1 [ .-]*? # optional seperators ([2-9]\\d{2}) # subscriber code \\2 [ .-]*? # optional seperators (\\d+).* # subscriber number \\3 \u0026#39;\u0026#39;\u0026#39;, re.VERBOSE) def __init__(self, phone_number): self.number = self._pattern.sub(r\u0026#39;\\1\\2\\3\u0026#39;, phone_number) if len(self.number) == 10: self.area_code = self.number[:3] else: raise ValueError(\u0026#34;Invalid Phone Number!\u0026#34;) def pretty(self): return f\u0026#39;({self.area_code}) {self.number[3:6]}-{self.number[6:]}\u0026#39;  "});index.add({'id':3036,'href':'/docs/learning/exercism/#prime-factors','title':"Prime Factors ",'section':"Learning/Exercism",'content':" python Compute the prime factors of a given natural number. - view\ndef prime_factors(number): factors, d = [], 2 while number \u0026gt; 1: while True: q, r = divmod(number, d) if r: d += 1 if d == 2 else 2 # skip evens else: factors.append(d) number = q break return factors rust Compute the prime factors of a given natural number. - view\npub fn factors(mut n: u64) -\u0026gt; Vec\u0026lt;u64\u0026gt; { let mut factors = Vec::new(); while n \u0026gt; 1 { let factor = (2..=n).find(|x| n % x == 0).unwrap(); factors.push(factor); n /= factor } factors }  "});index.add({'id':3037,'href':'/docs/learning/exercism/#protein-translation','title':"Protein Translation ",'section':"Learning/Exercism",'content':" javascript Translate RNA sequences into proteins. - view\nconst codons = (() =\u0026gt; { let AUG, UUU, UUC, UUA, UUG, UCU, UCC, UCA, UCG, UAU, UAC, UGU, UGC, UGG, UAA, UAG, UGA AUG = \u0026#39;Methionine\u0026#39; UUU = UUC = \u0026#39;Phenylalanine\u0026#39; UUA = UUG = \u0026#39;Leucine\u0026#39; UCU = UCC = UCA = UCG = \u0026#39;Serine\u0026#39; UAU = UAC = \u0026#39;Tyrosine\u0026#39; UGU = UGC = \u0026#39;Cysteine\u0026#39; UGG = \u0026#39;Tryptophan\u0026#39; UAA = UAG = UGA = \u0026#39;STOP\u0026#39; return Object.freeze({ AUG, UUU, UUC, UUA, UUG, UCU, UCC, UCA, UCG, UAU, UAC, UGU, UGC, UGG, UAA, UAG, UGA }) })() export function translate(rna = \u0026#39;\u0026#39;) { let proteins = [] for (let i = 0; i \u0026lt; rna.length; i += 3) { const protein = codons[rna.slice(i, i + 3)] if (protein === undefined) throw new Error(\u0026#39;Invalid codon\u0026#39;) if (protein === \u0026#39;STOP\u0026#39;) break proteins.push(protein) } return proteins } python Translate RNA sequences into proteins. - view\nfrom itertools import takewhile codons = { \u0026#39;AUG\u0026#39;: \u0026#34;Methionine\u0026#34;, \u0026#39;UUU\u0026#39;: \u0026#39;Phenylalanine\u0026#39;, \u0026#39;UUC\u0026#39;: \u0026#39;Phenylalanine\u0026#39;, \u0026#39;UUA\u0026#39;: \u0026#39;Leucine\u0026#39;, \u0026#39;UUG\u0026#39;: \u0026#39;Leucine\u0026#39;, \u0026#39;UCU\u0026#39;: \u0026#39;Serine\u0026#39;, \u0026#39;UCC\u0026#39;: \u0026#39;Serine\u0026#39;, \u0026#39;UCA\u0026#39;: \u0026#39;Serine\u0026#39;, \u0026#39;UCG\u0026#39;: \u0026#39;Serine\u0026#39;, \u0026#39;UAU\u0026#39;: \u0026#39;Tyrosine\u0026#39;, \u0026#39;UAC\u0026#39;: \u0026#39;Tyrosine\u0026#39;, \u0026#39;UGU\u0026#39;: \u0026#39;Cysteine\u0026#39;, \u0026#39;UGC\u0026#39;: \u0026#39;Cysteine\u0026#39;, \u0026#39;UGG\u0026#39;: \u0026#39;Tryptophan\u0026#39;, \u0026#39;UAA\u0026#39;: \u0026#39;STOP\u0026#39;, \u0026#39;UAG\u0026#39;: \u0026#39;STOP\u0026#39;, \u0026#39;UGA\u0026#39;: \u0026#39;STOP\u0026#39; } def proteins(strand): codon_gen = (strand[i:i+3] for i in range(0, len(strand), 3)) protein_gen = (codons[codon] for codon in codon_gen) return list(takewhile(lambda p: p != \u0026#39;STOP\u0026#39;, protein_gen))  "});index.add({'id':3038,'href':'/docs/learning/exercism/#proverb','title':"Proverb ",'section':"Learning/Exercism",'content':" rust For want of a horseshoe nail, a kingdom was lost, or so the saying goes. - view\npub fn build_proverb(list: Vec\u0026lt;\u0026amp;str\u0026gt;) -\u0026gt; String { match list.as_slice() { [] =\u0026gt; \u0026#34;\u0026#34;.to_owned(), _ =\u0026gt; list .iter() .zip(list.iter().skip(1)) .map(|(a, b)| format!(\u0026#34;For want of a {} the {} was lost.\u0026#34;, a, b)) .chain(std::iter::once(format!( \u0026#34;And all for the want of a {}.\u0026#34;, list[0] ))) .collect::\u0026lt;Vec\u0026lt;String\u0026gt;\u0026gt;() .join(\u0026#34;\\n\u0026#34;), } }  "});index.add({'id':3039,'href':'/docs/learning/exercism/#pythagorean-triplet','title':"Pythagorean Triplet ",'section':"Learning/Exercism",'content':" python A Pythagorean triplet is a set of three natural numbers, {a, b, c}, for - view\nfrom math import sqrt def triplets_with_sum(number): return set(gen_triplets(number)) def gen_triplets(number): # limit at a==b for a in range(1, 1 + int(number / (2 + sqrt(2)))): b_plus_c = number - a n = b_plus_c**2 - a**2 d = b_plus_c * 2 if n % d == 0: b = n // d c = b_plus_c - b yield (a, b, c) if a \u0026lt; b else (b, a, c) rust A Pythagorean triplet is a set of three natural numbers, {a, b, c}, for - view\nuse rayon::prelude::*; use std::collections::HashSet; pub fn find(sum: u32) -\u0026gt; HashSet\u0026lt;[u32; 3]\u0026gt; { (1_u32..(sum / 3_u32)) .into_par_iter() .map(|a| { let b_plus_c = sum - a; (a, b_plus_c, b_plus_c.pow(2) - a.pow(2), b_plus_c * 2) }) .filter(|(_a, _b_plus_c, n, d)| n % d == 0) .map(|(a, b_plus_c, n, d)| { let b = n / d; let c = b_plus_c - b; match a \u0026lt; b { true =\u0026gt; [a, b, c], false =\u0026gt; [b, a, c], } }) .collect::\u0026lt;HashSet\u0026lt;[u32; 3]\u0026gt;\u0026gt;() }  "});index.add({'id':3040,'href':'/docs/learning/exercism/#raindrops','title':"Raindrops ",'section':"Learning/Exercism",'content':" python Convert a number to a string, the contents of which depend on the number\u0026rsquo;s factors. - view\nPL_NG = {3: \u0026#39;Pling\u0026#39;, 5: \u0026#39;Plang\u0026#39;, 7: \u0026#39;Plong\u0026#39;} def raindrops(number): return \u0026#39;\u0026#39;.join([speak for factor, speak in PL_NG.items() if number % factor == 0]) or str(number) rust Convert a number to a string, the contents of which depend on the number\u0026rsquo;s factors. - view\nconst PLING: \u0026amp;str = \u0026#34;Pling\u0026#34;; const PLANG: \u0026amp;str = \u0026#34;Plang\u0026#34;; const PLONG: \u0026amp;str = \u0026#34;Plong\u0026#34;; fn factor(x: u32, n: u32) -\u0026gt; bool { n % x == 0 } pub fn raindrops(n: u32) -\u0026gt; String { let mut s = String::new(); if factor(3, n) { s += PLING; } if factor(5, n) { s += PLANG; } if factor(7, n) { s += PLONG; } if s.is_empty() { return n.to_string(); } s }  "});index.add({'id':3041,'href':'/docs/learning/exercism/#rational-numbers','title':"Rational Numbers ",'section':"Learning/Exercism",'content':" python A rational number is defined as the quotient of two integers a and b, called the numerator and denominator, respectively, where b != 0. - view\nfrom __future__ import division def gcd(a, b): if a == 0: return b return gcd(b % a, a) class Rational(object): def __init__(self, numer, denom): d = gcd(numer, denom) self.numer = numer / d self.denom = denom / d def __eq__(self, other): return self.numer == other.numer and self.denom == other.denom def __repr__(self): return \u0026#39;{}/{}\u0026#39;.format(self.numer, self.denom) def __add__(self, other): return Rational(self.numer * other.denom + other.numer * self.denom, self.denom * other.denom) def __sub__(self, other): return Rational(self.numer * other.denom - other.numer * self.denom, self.denom * other.denom) def __mul__(self, other): return Rational(self.numer * other.numer, self.denom * other.denom) def __truediv__(self, other): return Rational(self.numer * other.denom, self.denom * other.numer) def __abs__(self): return Rational(abs(self.numer), abs(self.denom)) def __pow__(self, power): numer, denom = (self.denom, self.numer) if power \u0026lt; 0 else ( self.numer, self.denom) power = abs(power) return Rational(numer**power, denom**power) def __rpow__(self, base): return base ** (self.numer / self.denom)  "});index.add({'id':3042,'href':'/docs/learning/exercism/#resistor-color','title':"Resistor Color ",'section':"Learning/Exercism",'content':" javascript Resistors have color coded bands, where each color maps to a number. The first 2 bands of a resistor have a simple encoding scheme: each color maps to a single number. - view\nexport const COLORS = [\u0026#34;black\u0026#34;, \u0026#34;brown\u0026#34;, \u0026#34;red\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;yellow\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;violet\u0026#34;, \u0026#34;grey\u0026#34;, \u0026#34;white\u0026#34;] export function colorCode(color) { return COLORS.indexOf(color) }  "});index.add({'id':3043,'href':'/docs/learning/exercism/#resistor-color-duo','title':"Resistor Color Duo ",'section':"Learning/Exercism",'content':" javascript If you want to build something using a Raspberry Pi, you\u0026rsquo;ll probably use resistors. For this exercise, you need to know two things about them: - view\nconst COLORS = [\u0026#34;black\u0026#34;, \u0026#34;brown\u0026#34;, \u0026#34;red\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;yellow\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;violet\u0026#34;, \u0026#34;grey\u0026#34;, \u0026#34;white\u0026#34;] export function value(bands) { return Number(bands.reduce((val, band) =\u0026gt; val + COLORS.indexOf(band), \u0026#39;\u0026#39;)) }  "});index.add({'id':3044,'href':'/docs/learning/exercism/#reverse-string','title':"Reverse String ",'section':"Learning/Exercism",'content':" python Reverse a string - view\ndef reverse(text): return text[::-1] rust Reverse a string - view\nextern crate unicode_segmentation; use unicode_segmentation::UnicodeSegmentation; pub fn reverse(input: \u0026amp;str) -\u0026gt; String { input.graphemes(true).rev().collect() }  "});index.add({'id':3045,'href':'/docs/learning/exercism/#rna-transcription','title':"Rna Transcription ",'section':"Learning/Exercism",'content':" javascript Given a DNA strand, return its RNA complement (per RNA transcription). - view\nconst COMPLEMENT = { G: \u0026#39;C\u0026#39;, C: \u0026#39;G\u0026#39;, T: \u0026#39;A\u0026#39;, A: \u0026#39;U\u0026#39; } export const toRna = (dna) =\u0026gt; dna.split(\u0026#39;\u0026#39;).reduce((rna, c) =\u0026gt; rna + (COMPLEMENT[c] || \u0026#39;\u0026#39;), \u0026#39;\u0026#39;) python Given a DNA strand, return its RNA complement (per RNA transcription). - view\nrna = str.maketrans(\u0026#34;GCTA\u0026#34;, \u0026#34;CGAU\u0026#34;) def to_rna(dna_strand): return dna_strand.translate(rna)  "});index.add({'id':3046,'href':'/docs/learning/exercism/#robot-name','title':"Robot Name ",'section':"Learning/Exercism",'content':" python Manage robot factory settings. - view\nimport random MOD = (26*10**3, 10**3, 10**2, 10, 1) MAX = 26**2 * 10**3 A = ord(\u0026#39;A\u0026#39;) def name_generator(): global A, MOD, MAX num = random.randint(0, MAX) # in AA111 format for i in range(5): d, num = divmod(num, MOD[i]) yield chr(A+d) if i \u0026lt; 2 else str(d) return class Robot(object): names = set() def __init__(self): self.reset() def reset(self): while True: name = self.gen_name() if name not in self.names: self.names.add(name) break self.name = name def gen_name(self): return \u0026#39;\u0026#39;.join(name_generator())  "});index.add({'id':3047,'href':'/docs/learning/exercism/#roman-numerals','title':"Roman Numerals ",'section':"Learning/Exercism",'content':" javascript Write a function to convert from normal numbers to Roman Numerals. - view\nconst NUMERALS = { 1: \u0026#39;I\u0026#39;, 5: \u0026#39;V\u0026#39;, 10: \u0026#39;X\u0026#39;, 50: \u0026#39;L\u0026#39;, 100: \u0026#39;C\u0026#39;, 500: \u0026#39;D\u0026#39;, 1000: \u0026#39;M\u0026#39; } function roman5(n, unit, left, right) { return n == 4 ? `${unit}${right}` : `${left}${unit.repeat(n)}` } function roman10(n, one, five, ten) { const [ONE, FIVE, TEN] = [one, five, ten].map(x =\u0026gt; NUMERALS[x]) return n \u0026gt;= 5 ? roman5(n % 5, ONE, FIVE, TEN) : roman5(n, ONE, \u0026#39;\u0026#39;, FIVE) } export function toRoman(n) { return [1000, 100, 10, 1].reduce((acc, I) =\u0026gt; { const MAX = 10 * n, num = Math.floor(n % (10*I) / I) return I \u0026lt;= MAX ? acc + roman10(num, I, 5*I, 10*I) : acc }, \u0026#39;\u0026#39;) }  "});index.add({'id':3048,'href':'/docs/learning/exercism/#run-length-encoding','title':"Run Length Encoding ",'section':"Learning/Exercism",'content':" javascript Implement run-length encoding and decoding. - view\nexport function encode(txt) { return txt.replace(/(.)\\1+/g, (run) =\u0026gt; run.length + run[0]) } export function decode(txt) { return txt.replace(/(\\d+)(.)/g, (_, run, char) =\u0026gt; char.repeat(run)) }  "});index.add({'id':3049,'href':'/docs/learning/exercism/#saddle-points','title':"Saddle Points ",'section':"Learning/Exercism",'content':" python Detect saddle points in a matrix. - view\ndef saddle_points(matrix): if not matrix: return [{}] row_length = len(matrix[0]) if [1 for row in matrix if row_length != len(row)]: raise ValueError(\u0026#34;Irregular Matrix!\u0026#34;) col_mins = [min(col) for col in zip(*matrix)] return [{\u0026#34;row\u0026#34;: r, \u0026#34;column\u0026#34;: c} for r, row_max in enumerate(map(max, matrix), 1) for c, col_min in enumerate(col_mins, 1) if row_max == col_min] or [{}] rust Detect saddle points in a matrix. - view\npub fn find_saddle_points(input: \u0026amp;[Vec\u0026lt;u64\u0026gt;]) -\u0026gt; Vec\u0026lt;(usize, usize)\u0026gt; { let len: usize = if input.len() \u0026gt; 0 { input[0].len() } else { 0 }; let row_max: Vec\u0026lt;_\u0026gt; = input.iter().filter_map(|v| v.iter().max()).collect(); let col_min: Vec\u0026lt;_\u0026gt; = (0..len) .filter_map(|i| input.iter().flatten().skip(i).step_by(len).min()) .collect(); input .iter() .enumerate() .flat_map(|(i, v)| v.iter().enumerate().map(move |(j, v)| (i.to_owned(), j, v))) .filter_map(|(i, j, v)| { if v \u0026gt;= row_max[i] \u0026amp;\u0026amp; v \u0026lt;= col_min[j] { Some((i, j)) } else { None } }) .collect() }  "});index.add({'id':3050,'href':'/docs/learning/exercism/#say','title':"Say ",'section':"Learning/Exercism",'content':" python Given a number from 0 to 999,999,999,999, spell out that number in English. - view\nSAY = { 0: \u0026#39;zero\u0026#39;, 1: \u0026#39;one\u0026#39;, 2: \u0026#39;two\u0026#39;, 3: \u0026#39;three\u0026#39;, 4: \u0026#39;four\u0026#39;, 5: \u0026#39;five\u0026#39;, 6: \u0026#39;six\u0026#39;, 7: \u0026#39;seven\u0026#39;, 8: \u0026#39;eight\u0026#39;, 9: \u0026#39;nine\u0026#39;, 10: \u0026#39;ten\u0026#39;, 11: \u0026#39;eleven\u0026#39;, 12: \u0026#39;twelve\u0026#39;, 13: \u0026#39;thirteen\u0026#39;, 14: \u0026#39;fourteen\u0026#39;, 15: \u0026#39;fifteen\u0026#39;, 16: \u0026#39;sixteen\u0026#39;, 17: \u0026#39;seventeen\u0026#39;, 18: \u0026#39;eighteen\u0026#39;, 19: \u0026#39;nineteen\u0026#39;, 20: \u0026#39;twenty\u0026#39;, 30: \u0026#39;thirty\u0026#39;, 40: \u0026#39;forty\u0026#39;, 50: \u0026#39;fifty\u0026#39;, 60: \u0026#39;sixty\u0026#39;, 70: \u0026#39;seventy\u0026#39;, 80: \u0026#39;eighty\u0026#39;, 90: \u0026#39;ninety\u0026#39; } def _say_postfix(number, divisor, postfix): quo, rem = divmod(number, divisor) return f\u0026#34;{_say(quo)} {postfix}\u0026#34; + (f\u0026#34; {_say(rem)}\u0026#34; if rem else \u0026#39;\u0026#39;) def _say(number): if number \u0026lt; 20: return SAY[number] elif number \u0026lt; 100: ten, rem = divmod(number, 10) return SAY[ten * 10] + (f\u0026#34;-{SAY[rem]}\u0026#34; if rem else \u0026#39;\u0026#39;) elif number \u0026lt; 1e3: return _say_postfix(number, 100, \u0026#34;hundred\u0026#34;) for divisor, postfix in [(1e3, \u0026#34;thousand\u0026#34;), (1e6, \u0026#34;million\u0026#34;), (1e9, \u0026#34;billion\u0026#34;)]: if number \u0026lt; 1e3 * divisor: return _say_postfix(number, divisor, postfix) def say(number): if number \u0026lt; 0 or number \u0026gt;= 1e12: raise ValueError(\u0026#34;Out of range\u0026#34;) else: return _say(number)  "});index.add({'id':3051,'href':'/docs/learning/exercism/#scrabble-score','title':"Scrabble Score ",'section':"Learning/Exercism",'content':" python Given a word, compute the scrabble score for that word. - view\nfrom enum import IntEnum class Score(IntEnum): A = E = I = O = U = L = N = R = S = T = 1 D = G = 2 B = C = M = P = 3 F = H = V = W = Y = 4 K = 5 J = X = 8 Q = Z = 10 def score(word): return sum(Score[c] for c in word.upper())  "});index.add({'id':3052,'href':'/docs/learning/exercism/#series','title':"Series ",'section':"Learning/Exercism",'content':" python Given a string of digits, output all the contiguous substrings of length n in - view\ndef slices(series, length): if length \u0026lt;= 0 or len(series) \u0026lt; length: raise ValueError(\u0026#34;Invalid length\u0026#34;) return [series[i:i+length] for i in range(len(series)+1-length)] rust Given a string of digits, output all the contiguous substrings of length n in - view\npub fn series(digits: \u0026amp;str, len: usize) -\u0026gt; Vec\u0026lt;String\u0026gt; { (0..digits.len().checked_sub(len - 1).unwrap_or(0)) .map(|i| digits[i..i + len].to_owned()) .collect() }  "});index.add({'id':3053,'href':'/docs/learning/exercism/#sgf-parsing','title':"Sgf Parsing ",'section':"Learning/Exercism",'content':" python Parsing a Smart Game Format string. - view\nimport re class SgfTree(object): def __init__(self, properties=None, children=None): self.properties = properties or {} self.children = children or [] def __eq__(self, other): if not isinstance(other, SgfTree): return False for k, v in self.properties.items(): if k not in other.properties: return False if other.properties[k] != v: return False for k in other.properties.keys(): if k not in self.properties: return False if len(self.children) != len(other.children): return False for a, b in zip(self.children, other.children): if a != b: return False return True def __ne__(self, other): return not self == other # TOKENs VAR_BEGIN, VAR_END, NEXT_LVL, KEY, VALUE, ELSE = (re.compile(s) for s in [ r\u0026#39;\\(\u0026#39;, # VAR_BEGIN r\u0026#39;\\)\u0026#39;, # VAR_END r\u0026#39;;\u0026#39;, # NEXT_LVL r\u0026#39;(?\u0026lt;=[];])[A-Z]+\u0026#39;, # KEY r\u0026#39;\\[(.+?)(?\u0026lt;!\\\\)\\]\u0026#39;, # VALUE \\1 r\u0026#39;[^);]\u0026#39; # ELSE ]) def escape(s): return s.replace(\u0026#39;\\n\u0026#39;, \u0026#39;\\\\n\u0026#39;) def unescape(s): return s.replace(r\u0026#39;\\n\u0026#39;, \u0026#39;\\n\u0026#39;).replace(\u0026#39;\\t\u0026#39;, \u0026#39; \u0026#39;).replace(\u0026#39;\\\\\u0026#39;, \u0026#39;\u0026#39;) def match(pattern, s, pos, action=None): m_peek = pattern.match(s, pos) if m_peek: if action: action(m_peek) return m_peek.end(), True return pos, False def add_node(parent): node = SgfTree() if parent: parent.children.append(node) else: parent = node def parse_key_value(s, parent, pos): m = KEY.match(s, pos) if not m: return pos, False pos, key, values = m.end(), m.group(0), [] while True: pos, matched = match(VALUE, s, pos, lambda m: values.append(unescape(m.group(1)))) if not matched: break if values: parent.properties[key] = values else: raise ValueError(\u0026#34;Error: No delimiter!\u0026#34;) return pos, True def parse_variation(s, parent=None, pos=0): m = VAR_BEGIN.match(s, pos) if not m: return m.end(), False, parent pos, node = m.end(), parent while True: pos, matched = match(VAR_END, s, pos) if not matched: break pos, matched = match(NEXT_LVL, s, pos) pos, matched = parse_key_value(s, node, pos) if matched: node = SgfTree() if parent: parent.children.append(node) else: parent = node continue pos, matched, _ = parse_variation(s, node, pos) if matched: continue _, matched = match(ELSE, s, pos) if matched: raise ValueError(\u0026#34;Error!\u0026#34;) return pos, True, parent def parse(input_string): _, _, root = parse_variation(escape(input_string)) if not root: raise ValueError(\u0026#34;No nodes!\u0026#34;) return root parse(\u0026#39;(;A[\\\\]b\\nc\\nd\\t\\te \\n\\\\]])\u0026#39;)  "});index.add({'id':3054,'href':'/docs/learning/exercism/#sieve','title':"Sieve ",'section':"Learning/Exercism",'content':" python Use the Sieve of Eratosthenes to find all the primes from 2 up to a given - view\ndef primes(limit): numbers = list(range(2, limit + 1)) prime_gen = (n for n in numbers if n) while True: prime = next(prime_gen, None) if not prime: break for i in range(prime * 2, len(numbers) + 2, prime): numbers[i - 2] = 0 # mark multiples of prime return [n for n in numbers if n] # primes  "});index.add({'id':3055,'href':'/docs/learning/exercism/#simple-cipher','title':"Simple Cipher ",'section':"Learning/Exercism",'content':" python Implement a simple shift cipher like Caesar and a more secure substitution cipher. - view\nfrom itertools import cycle from string import ascii_lowercase from random import choice A, Z = ord(\u0026#39;a\u0026#39;), ord(\u0026#39;z\u0026#39;) def wrap_chr(val): return chr((val - A) % (Z - A + 1) + A) class Cipher(object): def __init__(self, key=None): self.key = key or \u0026#39;\u0026#39;.join(choice(ascii_lowercase) for _ in range(100)) def encode(self, text, reverse=False): return \u0026#39;\u0026#39;.join(wrap_chr(A - ord(k) + ord(c) if reverse else ord(k) - A + ord(c)) for c, k in zip(text, cycle(self.key))) def decode(self, text): return self.encode(text, reverse=True) class Caesar(Cipher): def __init__(self): super().__init__(\u0026#39;d\u0026#39;)  "});index.add({'id':3056,'href':'/docs/learning/exercism/#space-age','title':"Space Age ",'section':"Learning/Exercism",'content':" javascript Given an age in seconds, calculate how old someone would be on: - view\nconst EARTH_YEAR_IN_SECONDS = 31557600 const YEAR_IN_EARTH_YEARS = { mercury: 0.2408467, venus: 0.61519726, earth: 1.0, mars: 1.8808158, jupiter: 11.862615, saturn: 29.447498, uranus: 84.016846, neptune: 164.79132, } export const age = (planet, age_in_seconds) =\u0026gt; { const year_in_seconds = YEAR_IN_EARTH_YEARS[planet] * EARTH_YEAR_IN_SECONDS return Number((age_in_seconds / year_in_seconds).toFixed(2)) } python Given an age in seconds, calculate how old someone would be on: - view\nclass SpaceAge(object): PLANET_ORBITS = [(p, o * 31557600) for p, o in ( (\u0026#39;earth\u0026#39;, 1.0), (\u0026#39;mercury\u0026#39;, 0.2408467), (\u0026#39;venus\u0026#39;, 0.61519726), (\u0026#39;mars\u0026#39;, 1.8808158), (\u0026#39;jupiter\u0026#39;, 11.862615), (\u0026#39;saturn\u0026#39;, 29.447498), (\u0026#39;uranus\u0026#39;, 84.016846), (\u0026#39;neptune\u0026#39;, 164.79132) )] def __init__(self, seconds): self.seconds = seconds for planet, orbit in self.PLANET_ORBITS: setattr(self, \u0026#39;on_\u0026#39; + planet, lambda orbit=orbit: round(self.seconds / orbit, 2))  "});index.add({'id':3057,'href':'/docs/learning/exercism/#sum-of-multiples','title':"Sum of Multiples ",'section':"Learning/Exercism",'content':" python Given a number, find the sum of all the unique multiples of particular numbers up to - view\ndef sum_of_multiples(limit, multiples): return sum({i for m in multiples if m \u0026gt; 0 for i in range(m, limit, m)}) rust Given a number, find the sum of all the unique multiples of particular numbers up to - view\npub fn sum_of_multiples(limit: u32, factors: \u0026amp;[u32]) -\u0026gt; u32 { (1..limit) .filter(|num| factors.iter().any(|factor| num % factor == 0)) .fold(0, |sum, multiple| sum + multiple) }  "});index.add({'id':3058,'href':'/docs/learning/exercism/#twelve-days','title':"Twelve Days ",'section':"Learning/Exercism",'content':" python Output the lyrics to \u0026lsquo;The Twelve Days of Christmas\u0026rsquo;. - view\nthing = [\u0026#34;a Partridge\u0026#34;, \u0026#34;two Turtle Doves\u0026#34;, \u0026#34;three French Hens\u0026#34;, \u0026#34;four Calling Birds\u0026#34;, \u0026#34;five Gold Rings\u0026#34;, \u0026#34;six Geese-a-Laying\u0026#34;, \u0026#34;seven Swans-a-Swimming\u0026#34;, \u0026#34;eight Maids-a-Milking\u0026#34;, \u0026#34;nine Ladies Dancing\u0026#34;, \u0026#34;ten Lords-a-Leaping\u0026#34;, \u0026#34;eleven Pipers Piping\u0026#34;, \u0026#34;twelve Drummers Drumming\u0026#34;] ordinal = [\u0026#34;first\u0026#34;, \u0026#34;second\u0026#34;, \u0026#34;third\u0026#34;, \u0026#34;fourth\u0026#34;, \u0026#34;fifth\u0026#34;, \u0026#34;sixth\u0026#34;, \u0026#34;seventh\u0026#34;, \u0026#34;eighth\u0026#34;, \u0026#34;ninth\u0026#34;, \u0026#34;tenth\u0026#34;, \u0026#34;eleventh\u0026#34;, \u0026#34;twelfth\u0026#34;] def things(n): if n == 0: return thing[n] return \u0026#34;, \u0026#34;.join(thing[i] for i in range(n, 0, -1)) + \u0026#34;, and \u0026#34; + thing[0] def recite(start_verse, end_verse): return [f\u0026#34;On the {ordinal[i]} day of Christmas my true love gave to me: {things(i)} in a Pear Tree.\u0026#34; for i in range(start_verse-1, end_verse)]  "});index.add({'id':3059,'href':'/docs/learning/exercism/#two-fer','title':"Two Fer ",'section':"Learning/Exercism",'content':" javascript Two-fer or 2-fer is short for two for one. One for you and one for me. - view\nexport function twoFer(name = \u0026#39;you\u0026#39;) { return `One for ${name}, one for me.` } python Two-fer or 2-fer is short for two for one. One for you and one for me. - view\ndef two_fer(name=\u0026#34;you\u0026#34;): return f\u0026#34;One for {name}, one for me.\u0026#34;  "});index.add({'id':3060,'href':'/docs/learning/exercism/#word-count','title':"Word Count ",'section':"Learning/Exercism",'content':" python Given a phrase, count the occurrences of each word in that phrase. - view\nfrom collections import Counter from re import sub def count_words(sentence): words = sub(r\u0026#34;[^\u0026#39;0-9A-Za-z]|(?\u0026lt;!\\w)\u0026#39;|\u0026#39;(?!\\w)\u0026#34;, \u0026#39; \u0026#39;, sentence).lower().split() return Counter(words)  "});index.add({'id':3061,'href':'/docs/learning/exercism/#yacht','title':"Yacht ",'section':"Learning/Exercism",'content':" python Score a single throw of dice in Yacht - view\n# Score categories # Change the values as you see fit YACHT = 0 ONES = 1 TWOS = 2 THREES = 3 FOURS = 4 FIVES = 5 SIXES = 6 FULL_HOUSE = 7 FOUR_OF_A_KIND = 8 LITTLE_STRAIGHT = 9 BIG_STRAIGHT = 10 CHOICE = 11 def score(dice, category): def count_all(): count = [0]*6 for d in dice: count[d-1] += 1 return count if category is YACHT: return 50 if count_all().count(0) == 5 else 0 # there is not any of other five elif category is LITTLE_STRAIGHT: return 30 if all(count_all()[:5]) else 0 elif category == BIG_STRAIGHT: return 30 if all(count_all()[1:]) else 0 elif category is FULL_HOUSE: counts = count_all() return sum(dice) if all(count in counts for count in [2, 3]) else 0 elif category is FOUR_OF_A_KIND: try: # there is more than 4 of any return 4 * next(i+1 for i, c in enumerate(count_all()) if c \u0026gt;= 4) except StopIteration: return 0 elif category is CHOICE: return sum(dice) else: # ONES, TWOS, THREES, FOURS, FIVES, SIXES return category * dice.count(category)  "});index.add({'id':4000,'href':'/docs/learning/resources/#resources','title':"Resources ",'section':"Learning/Resources",'content':"  Select Topic... drawing git windows  Select Type... cmdfu tutorial  Topic Type Resource Detail  git tutorial Learn Git Branching  Interactive git tutorial, game.   git cmdfu Oh Shit, Git!?!  For fixing mistakes.   windows cmdfu Privacy.sexy  Website to copy and paste privacy/security/bloat PowerShell scripts   drawing tutorial Bezier game  Interactive way to learn drawing perfect bezier curves.    "});})();